# Ime pipeline-a za backend
name: Backend CI

# Dogodki, ki sprožijo workflow (push in pull request na glavno vejo)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job za gradnjo backenda
  build-backend:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti za backend
      uses: actions/cache@v3
      with:
        path: aplikacija/backend/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('aplikacija/backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies  # Namestitev odvisnosti za backend
      run: |
        cd aplikacija/backend
        npm ci

    - name: Initialize database
      run: |
        mkdir -p aplikacija/backend/migrations
        cat > aplikacija/backend/migrations/init.sql <<EOL
        DROP TABLE IF EXISTS `employees`;
        CREATE TABLE `employees` (
          `id` int NOT NULL,
          `name` varchar(50) NOT NULL,
          `email` varchar(100) NOT NULL,
          `username` varchar(255) NOT NULL,
          `password` varchar(255) NOT NULL,
          `isBoss` tinyint(1) DEFAULT '0'
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

        INSERT IGNORE INTO `employees` (`id`, `name`, `email`, `username`, `password`, `isBoss`) VALUES
        (1, 'John Doe', 'john.doe@example.com', 'john', '$2b$10$XVscmkUtAnWh5FdKysBXg.8SNo1tCnVwQOPUP0/y0i2EGe3q7.r3a', 0),
        (2, 'Jane Smith', 'jane.smith@example.com', 'jane', '$2b$10$XVscmkUtAnWh5FdKysBXg.8SNo1tCnVwQOPUP0/y0i2EGe3q7.r3a', 1),
        (3, 'Bob Johnson', 'bob.johnson@example.com', 'bob', '$2b$10$XVscmkUtAnWh5FdKysBXg.8SNo1tCnVwQOPUP0/y0i2EGe3q7.r3a', 0);

        DROP TABLE IF EXISTS `work_entries`;
        CREATE TABLE `work_entries` (
          `id` int NOT NULL,
          `employee_id` int NOT NULL,
          `date` date NOT NULL,
          `hours_worked` decimal(4,2) NOT NULL,
          `description` text NOT NULL,
          `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

        INSERT IGNORE INTO `work_entries` (`id`, `employee_id`, `date`, `hours_worked`, `description`, `updated_at`) VALUES
        (1, 1, '2024-11-21', 12.00, 'test', '2024-11-07 21:13:43'),
        (2, 2, '2024-11-06', 7.00, 'Worked on documentation', '2024-11-07 18:01:13'),
        (3, 3, '2024-11-05', 6.00, 'Attended team meeting', '2024-11-07 18:01:13');

        ALTER TABLE `employees`
          ADD PRIMARY KEY (`id`),
          ADD UNIQUE KEY `email` (`email`);

        ALTER TABLE `work_entries`
          ADD PRIMARY KEY (`id`),
          ADD KEY `employee_id` (`employee_id`);

        ALTER TABLE `employees`
          MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

        ALTER TABLE `work_entries`
          MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

        ALTER TABLE `work_entries`
          ADD CONSTRAINT `work_entries_ibfk_1` FOREIGN KEY (`employee_id`) REFERENCES `employees` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT;
        EOL
        mysql -h 127.0.0.1 -u testuser -ptestpassword testdb < aplikacija/backend/migrations/init.sql

    - name: Build backend  # Gradnja backenda
      run: echo "No build step for backend"

    - name: Upload backend artifacts  # Shranjevanje artefaktov za backend
      uses: actions/upload-artifact@v4
      with:
        name: backend-build  # Ime artefakta
        path: aplikacija/backend/build  # Pot do artefaktov

  # Job za testiranje backenda
  test-backend:
    needs: build-backend  # Testiranje se izvede po uspešni gradnji backenda
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code  # Kloniranje repozitorija
      uses: actions/checkout@v3

    - name: Setup Node.js  # Namestitev Node.js okolja
      uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Cache node_modules  # Caching odvisnosti za backend
      uses: actions/cache@v3
      with:
        path: aplikacija/backend/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('aplikacija/backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install dependencies  # Namestitev odvisnosti za backend
      run: |
        cd aplikacija/backend
        npm ci

    - name: Run tests with coverage  # Izvajanje testov s pokritostjo za backend
      run: |
        cd aplikacija/backend
        npm run test:ci

    - name: Upload coverage report  # Shranjevanje poročila o pokritosti kode
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: aplikacija/backend/coverage/